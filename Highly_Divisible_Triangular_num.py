'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle
number to have over five hundred divisors?
'''

triangle_addends = 1
triangle_nums = [1]
sum = 1

while True:
    factor_counter = 2
    sum += (triangle_addends + 1)
    triangle_addends += 1
    triangle_nums.append(sum)

    if sum % 2 == 0:
        # print("even number {}".format(sum))
        # print("range num: {}".format((sum/2)))
        '''try:
            for num in range(1, int(sum / 2)):
                if sum % num == 0:
                    factor_counter += 1
        except TypeError:
            print("TypeError")
            continue'''
        # print("working")
        factor_counter = 2
        for num in range(1, int(sum/2)):
            if sum % num == 0:
                factor_counter += 1
    else:
        continue

    if factor_counter > 400:
        print("factors: {} num: {}".format(factor_counter, sum))

    if factor_counter > 500:
        print("Number: {}, # of factors {}".format(sum, factor_counter))
        break
